-- Entity name: montgomery_multiplier_tb
-- Author: Stephen Carter, Jacob Barnett
-- Contact: stephen.carter@mail.mcgill.ca, jacob.barnett@mail.mcgill.ca
-- Date: April 06, 2016
-- Description:
-- 	Testbench used to test the Montgomery Multiplier
--		Tests autogenerated from a python script

library ieee;
use IEEE.std_logic_1164.all;
--use IEEE.std_logic_arith.all;
--use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;


entity montgomery_multiplier_tb is
end entity;

architecture test of montgomery_multiplier_tb is
-- define the ALU compontent to be tested
Component montgomery_multiplier is
 	Generic(
		WIDTH_IN : integer := 64
	);
	Port(	A :	in unsigned(WIDTH_IN-1 downto 0);
		B :	in unsigned(WIDTH_IN-1 downto 0);
		N :	in unsigned(WIDTH_IN-1 downto 0);
		latch : in std_logic;
		clk :	in std_logic;
		reset :	in std_logic;
		M : 	out unsigned(WIDTH_IN-1 downto 0)
	);
end component;

CONSTANT WIDTH_IN : integer := 64;

CONSTANT clk_period : time := 1 ns;

Signal N_in : unsigned(WIDTH_IN-1 downto 0) := (others => '0');
Signal A_in : unsigned(WIDTH_IN-1 downto 0) := (others => '0');
Signal B_in : unsigned(WIDTH_IN-1 downto 0) := (others => '0');

Signal clk : std_logic := '0';
Signal reset_t : std_logic := '0';
Signal latch_in : std_logic := '0';

Signal M_out : unsigned(WIDTH_IN-1 downto 0) := (others => '0');

Begin
-- device under test
dut: montgomery_multiplier PORT MAP(	A	=> 	A_in,
					B 	=> 	B_in,
					N 	=> 	N_in,
					latch	=>	latch_in,
					clk	=> 	clk,
					reset 	=>	reset_t,
					M	=>	M_out);
  
-- process for clock
clk_process : Process
Begin
	clk <= '0';
	wait for clk_period/2;
	clk <= '1';
	wait for clk_period/2;
end process;

stim_process: process
Begin


	reset_t <= '1';
	wait for 1 * clk_period;
	reset_t <= '0';
	wait for 1 * clk_period;


	REPORT "Begin test case for a=1988997148623256748 (A=1441507581539690666), b=65537 (B=1644040407193040059), N=3113988919390343077";
	REPORT "Expected output is 3000523821869250693, 0010100110100100000000001000010010111110100111010011100010000101";
	A_in <= "0001010000000001010000111000001000001010101101001010100010101010";
	B_in <= "0001011011010000110011100000101000110011001000010011010010111011";
	N_in <= "0010101100110111000111000110110001101110110000111000111110100101";
	latch_in <= '1';
	wait for 2 * clk_period;
	latch_in <= '0';
	wait for 65 * clk_period;
	ASSERT(M_out = "0010100110100100000000001000010010111110100111010011100010000101") REPORT "test failed" SEVERITY ERROR;

	REPORT "Begin test case for a=1330660815518198821 (A=360742898712776874), b=65537 (B=2090851463264958074), N=2382458936276880103";
	REPORT "Expected output is 867328263776729269, 0000110000001001010111100111010111101010000100010111100010110101";
	A_in <= "0000010100000001100111011100000101001101000001010001000010101010";
	B_in <= "0001110100000100001100100101001111111010000000110111011001111010";
	N_in <= "0010000100010000001100011100011110011100101111010000101011100111";
	latch_in <= '1';
	wait for 2 * clk_period;
	latch_in <= '0';
	wait for 65 * clk_period;
	ASSERT(M_out = "0000110000001001010111100111010111101010000100010111100010110101") REPORT "test failed" SEVERITY ERROR;

	REPORT "Begin test case for a=2161396665697179474 (A=1757493187540922933), b=65537 (B=121247895425803959), N=2827832832846305591";
	REPORT "Expected output is 371917206593233000, 0000010100101001010100001011101010011000110110000110000001101000";
	A_in <= "0001100001100011110111101011111000010010100010111011001000110101";
	B_in <= "0000000110101110110000100101000110001000100111100110011010110111";
	N_in <= "0010011100111110011110101111101010011101111111011001100100110111";
	latch_in <= '1';
	wait for 2 * clk_period;
	latch_in <= '0';
	wait for 65 * clk_period;
	ASSERT(M_out = "0000010100101001010100001011101010011000110110000110000001101000") REPORT "test failed" SEVERITY ERROR;

	REPORT "Begin test case for a=1427373700605688009 (A=2273618984539622699), b=65537 (B=346923963018559484), N=3120593479388269757";
	REPORT "Expected output is 949342462760197370, 0000110100101100101111011111000010100111000001000001110011111010";
	A_in <= "0001111110001101100001000110101110011000000100011000110100101011";
	B_in <= "0000010011010000100001011000000110011011110010101011111111111100";
	N_in <= "0010101101001110100100110011110001100011010101101000110010111101";
	latch_in <= '1';
	wait for 2 * clk_period;
	latch_in <= '0';
	wait for 65 * clk_period;
	ASSERT(M_out = "0000110100101100101111011111000010100111000001000001110011111010") REPORT "test failed" SEVERITY ERROR;



	wait;

end process;
end architecture;

